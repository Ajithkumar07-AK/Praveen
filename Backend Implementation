// backend/services/websocket.service.js
const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const User = require('../models/User.model');
const logger = require('../utils/logger');

let wss;

const initWebSocket = (server) => {
  wss = new WebSocket.Server({ server });

  wss.on('connection', async (ws, req) => {
    try {
      const token = req.url.split('token=')[1];
      if (!token) {
        return ws.close(1008, 'Authentication failed');
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const user = await User.findById(decoded.id);
      
      if (!user) {
        return ws.close(1008, 'User not found');
      }

      ws.userId = user._id;
      ws.domain = user.domain;

      // Send initial progress data
      const progress = await getProgressData(user._id);
      ws.send(JSON.stringify({ type: 'INIT_PROGRESS', data: progress }));

      ws.on('message', (message) => {
        logger.info(`Received message from user ${user._id}: ${message}`);
      });

      ws.on('close', () => {
        logger.info(`Connection closed for user ${user._id}`);
      });

    } catch (error) {
      logger.error(`WebSocket error: ${error.message}`);
      ws.close(1008, 'Authentication failed');
    }
  });

  logger.info('WebSocket server initialized');
};

const broadcastProgressUpdate = async (userId) => {
  if (!wss) return;

  const progress = await getProgressData(userId);
  const message = JSON.stringify({ type: 'PROGRESS_UPDATE', data: progress });

  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN && client.userId === userId) {
      client.send(message);
    }
  });
};

const getProgressData = async (userId) => {
  const user = await User.findById(userId);
  const totalLevels = 10; // Assuming 10 levels per domain
  const completedLevels = user.completedLevels.length;
  const progressPercentage = Math.round((completedLevels / totalLevels) * 100);
  
  return {
    userId,
    domain: user.domain,
    completedLevels,
    totalLevels,
    progressPercentage,
    lastCompleted: user.completedLevels[user.completedLevels.length - 1] || null
  };
};

module.exports = {
  initWebSocket,
  broadcastProgressUpdate
};
