// frontend/src/components/dashboard/AnalyticsDashboard.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import api from '../../services/api';
import { 
  Box, Typography, Grid, Card, CardContent, 
  LinearProgress, Divider, Tabs, Tab, 
  Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Paper 
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { 
  RadarChart, Radar, PolarGrid, PolarAngleAxis, 
  PolarRadiusAxis, ResponsiveContainer, LineChart, 
  Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend 
} from 'recharts';

const StatCard = styled(Card)(({ theme }) => ({
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
  transition: 'transform 0.3s',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: theme.shadows[4]
  }
}));

const AnalyticsDashboard = () => {
  const { currentUser } = useAuth();
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [tabValue, setTabValue] = useState(0);

  useEffect(() => {
    const fetchAnalytics = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/users/${currentUser._id}/analytics`);
        setAnalytics(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load analytics data');
        setLoading(false);
      }
    };

    fetchAnalytics();
  }, [currentUser]);

  if (loading) return <Typography>Loading analytics...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;
  if (!analytics) return null;

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Performance Analytics
      </Typography>
      
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard>
            <CardContent>
              <Typography variant="h6" color="textSecondary">
                Total Tests Taken
              </Typography>
              <Typography variant="h3">
                {analytics.totalTests}
              </Typography>
            </CardContent>
          </StatCard>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <StatCard>
            <CardContent>
              <Typography variant="h6" color="textSecondary">
                Average Score
              </Typography>
              <Typography variant="h3">
                {analytics.averageScore}%
              </Typography>
              <LinearProgress 
                variant="determinate" 
                value={analytics.averageScore} 
                sx={{ mt: 2, height: 10 }}
              />
            </CardContent>
          </StatCard>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <StatCard>
            <CardContent>
              <Typography variant="h6" color="textSecondary">
                Strongest Area
              </Typography>
              <Typography variant="h3">
                {analytics.strongestArea}
              </Typography>
              <Typography variant="body2" sx={{ mt: 1 }}>
                Accuracy: {analytics.strongestAreaAccuracy}%
              </Typography>
            </CardContent>
          </StatCard>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <StatCard>
            <CardContent>
              <Typography variant="h6" color="textSecondary">
                Improvement Needed
              </Typography>
              <Typography variant="h3">
                {analytics.weakestArea}
              </Typography>
              <Typography variant="body2" sx={{ mt: 1 }}>
                Accuracy: {analytics.weakestAreaAccuracy}%
              </Typography>
            </CardContent>
          </StatCard>
        </Grid>
      </Grid>
      
      <Divider sx={{ my: 3 }} />
      
      <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 3 }}>
        <Tab label="Performance Trends" />
        <Tab label="Skill Analysis" />
        <Tab label="Test History" />
        <Tab label="Recommendations" />
      </Tabs>
      
      {tabValue === 0 && (
        <Box sx={{ height: 400 }}>
          <Typography variant="h6" gutterBottom>
            Score Trend Over Time
          </Typography>
          <ResponsiveContainer width="100%" height="90%">
            <LineChart data={analytics.scoreTrend}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis domain={[0, 100]} />
              <Tooltip />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="score" 
                stroke="#8884d8" 
                activeDot={{ r: 8 }} 
              />
              <Line 
                type="monotone" 
                dataKey="average" 
                stroke="#82ca9d" 
              />
            </LineChart>
          </ResponsiveContainer>
        </Box>
      )}
      
      {tabValue === 1 && (
        <Box sx={{ height: 400 }}>
          <Typography variant="h6" gutterBottom>
            Skill Radar Chart
          </Typography>
          <ResponsiveContainer width="100%" height="90%">
            <RadarChart cx="50%" cy="50%" outerRadius="80%" data={analytics.skillRadar}>
              <PolarGrid />
              <PolarAngleAxis dataKey="subject" />
              <PolarRadiusAxis angle={30} domain={[0, 100]} />
              <Radar 
                name="Your Performance" 
                dataKey="score" 
                stroke="#8884d8" 
                fill="#8884d8" 
                fillOpacity={0.6} 
              />
              <Radar 
                name="Domain Average" 
                dataKey="average" 
                stroke="#82ca9d" 
                fill="#82ca9d" 
                fillOpacity={0.3} 
              />
              <Tooltip />
              <Legend />
            </RadarChart>
          </ResponsiveContainer>
        </Box>
      )}
      
      {tabValue === 2 && (
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Date</TableCell>
                <TableCell>Level</TableCell>
                <TableCell>Score</TableCell>
                <TableCell>Time Taken</TableCell>
                <TableCell>Details</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {analytics.testHistory.map((test) => (
                <TableRow key={test._id}>
                  <TableCell>{new Date(test.date).toLocaleDateString()}</TableCell>
                  <TableCell>{test.level}</TableCell>
                  <TableCell>{test.score}%</TableCell>
                  <TableCell>{test.timeTaken} mins</TableCell>
                  <TableCell>View</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
      
      {tabValue === 3 && (
        <Box>
          <Typography variant="h6" gutterBottom>
            Personalized Recommendations
          </Typography>
          <Grid container spacing={2}>
            {analytics.recommendations.map((rec, index) => (
              <Grid item xs={12} key={index}>
                <Card>
                  <CardContent>
                    <Typography variant="subtitle1">
                      {rec.category}
                    </Typography>
                    <Typography variant="body1">
                      {rec.suggestion}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Priority: {rec.priority}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}
    </Box>
  );
};

export default AnalyticsDashboard;
